#!/bin/sh

AC_INIT(VERSION,, eda-dev@opencircuitdesign.com)
AC_PREREQ(2.60)
AC_CONFIG_SRCDIR([Makefile.in])

# Determine the host and build type.
# ===========================================================================
AC_CANONICAL_HOST
AC_CANONICAL_SYSTEM

PACKAGE=tclftdi
VERSION=`cat ./VERSION | cut -d. -f1-2`
AC_DEFINE_UNQUOTED(TCLFTDI_VERSION, "${TCLFTDI_VERSION}")
AC_DEFINE_UNQUOTED(TCLFTDI_REVISION, "${TCLFTDI_REVISION}")

AC_SUBST(VERSION)
AC_ARG_PROGRAM

# Required programs
# ===========================================================================
AC_PROG_CC
AC_PROG_CPP
AC_ISC_POSIX
if test "x$U" != "x"; then
  AC_MSG_ERROR(Compiler not ANSI compliant)
fi
AC_PROG_INSTALL
AC_PROG_RANLIB
AC_CHECK_PROG(AUTOCONF, autoconf, autoconf, :)
AC_CHECK_PROG(CP, cp, cp, :)
AC_CHECK_PROG(RM, rm, rm, :)
AC_CHECK_PROG(MKDIR, mkdir, mkdir, :)

AC_LANG_C
AC_HEADER_STDC
AC_CHECK_FUNCS(setenv putenv)

dnl Enable compile-time Optimization?  Disable by default for debugging
AC_ARG_ENABLE(optimize,
[  --enable-optimize enable compile-time optimizer flag -O2], , [
   CFLAGS=`echo $CFLAGS | sed -e "s/ -O2//"`
])

#------------------------------------------------------------
# AC_PROG_LD - find the path to the GNU or non-GNU linker
# (This stuff ripped from libtool)
#------------------------------------------------------------
AC_DEFUN([AC_PROG_LD],
[AC_ARG_WITH(gnu-ld,
[  --with-gnu-ld           assume the C compiler uses GNU ld [[default=no]]],
test "$withval" = no || with_gnu_ld=yes, with_gnu_ld=no)
AC_REQUIRE([AC_PROG_CC])dnl
AC_REQUIRE([AC_CANONICAL_HOST])dnl
dnl ###not for PostgreSQL### AC_REQUIRE([AC_CANONICAL_BUILD])dnl
ac_prog=ld
if test "$GCC" = yes; then
  # Check if gcc -print-prog-name=ld gives a path.
  AC_MSG_CHECKING([for ld used by GCC])
  case $host in
  *-*-mingw*)
    # gcc leaves a trailing carriage return which upsets mingw
    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\015'` ;;
  *)
    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;
  esac
  case "$ac_prog" in
    # Accept absolute paths.
changequote(,)dnl
    [\\/]* | [A-Za-z]:[\\/]*)
      re_direlt='/[^/][^/]*/\.\./'
changequote([,])dnl
      # Canonicalize the path of ld
      ac_prog=`echo $ac_prog| sed 's%\\\\%/%g'`
      while echo $ac_prog | grep "$re_direlt" > /dev/null 2>&1; do
        ac_prog=`echo $ac_prog| sed "s%$re_direlt%/%"`
      done
      test -z "$LD" && LD="$ac_prog"
      ;;
  "")
    # If it fails, then pretend we aren't using GCC.
    ac_prog=ld
    ;;
  *)
    # If it is relative, then search for the first ld in PATH.
    with_gnu_ld=unknown
    ;;
  esac
elif test "$with_gnu_ld" = yes; then
  AC_MSG_CHECKING([for GNU ld])
else
  AC_MSG_CHECKING([for non-GNU ld])
fi
AC_CACHE_VAL(ac_cv_path_LD,
[if test -z "$LD"; then
  IFS="${IFS=   }"; ac_save_ifs="$IFS"; IFS="${IFS}${PATH_SEPARATOR-:}"
  for ac_dir in $PATH; do
    test -z "$ac_dir" && ac_dir=.
    if test -f "$ac_dir/$ac_prog" || test -f "$ac_dir/$ac_prog$ac_exeext"; then
      ac_cv_path_LD="$ac_dir/$ac_prog"
      # Check to see if the program is GNU ld.  I'd rather use --version,
      # but apparently some GNU ld's only accept -v.
      # Break only if it was the GNU/non-GNU ld that we prefer.
      if "$ac_cv_path_LD" -v 2>&1 < /dev/null | egrep '(GNU|with BFD)' > /dev/null; then
        test "$with_gnu_ld" != no && break
      else
        test "$with_gnu_ld" != yes && break
      fi
    fi
  done
  IFS="$ac_save_ifs"
else
  ac_cv_path_LD="$LD" # Let the user override the test with a path.
fi])
LD="$ac_cv_path_LD"
if test -n "$LD"; then
  AC_MSG_RESULT($LD)
else
  AC_MSG_RESULT(no)
fi
test -z "$LD" && AC_MSG_ERROR([no acceptable ld found in \$PATH])
AC_PROG_LD_GNU
])

AC_DEFUN([AC_PROG_LD_GNU],
[AC_CACHE_CHECK([if the linker ($LD) is GNU ld], ac_cv_prog_gnu_ld,
[# I'd rather use --version here, but apparently some GNU ld's only accept -v.
if $LD -v 2>&1 </dev/null | egrep '(GNU|with BFD)' 1>&5; then
  ac_cv_prog_gnu_ld=yes
else
  ac_cv_prog_gnu_ld=no
fi])
with_gnu_ld=$ac_cv_prog_gnu_ld
])

AC_PROG_LD

dnl --- By default, enable TCL and search for Tcl/Tk
dnl	Library and Header files in standard places

tcl_path="yes"
tk_path="yes"
tcl_includes=""
tk_includes=""
tcl_libraries=""
tk_libraries=""

dnl ---------------------------------------------
dnl Path to Tcl/Tk development files
dnl ---------------------------------------------

AC_ARG_WITH(tcl,	[  --with-tcl=DIR	Find tclConfig.sh in DIR],
   tcl_path=$withval)
AC_ARG_WITH(tk,		[  --with-tk=DIR	Find tkConfig.sh in DIR],
   tk_path=$withval)
AC_ARG_WITH(tclincls,   [  --with-tclincls=DIR	Find tcl.h in DIR],
   tcl_includes=$withval)
AC_ARG_WITH(tkincls,    [  --with-tkincls=DIR	Find tk.h in DIR],
   tk_includes=$withval)
AC_ARG_WITH(tcllibs,    [  --with-tcllibs=DIR	Find Tcl library in DIR],
   tcl_libraries=$withval)
AC_ARG_WITH(tklibs,     [  --with-tklibs=DIR	Find Tk library in DIR],
   tk_libraries=$withval)

dnl ---------------------------------------------
dnl Search for all the Tcl/Tk development files
dnl ---------------------------------------------

if test "x$tcl_path" != "x" ; then

  TCL_INC_DIR="."
  TK_INC_DIR="."

  AC_MSG_CHECKING([for tclConfig.sh])
  tcl_config_sh=""

  if test "$tcl_path" = "no" ; then
    tcl_path=""
  elif test "$tcl_path" != "yes" ; then
    #
    # Verify that a tclConfig.sh file exists in the directory specified 
    # by --with-tcl. 
    #
    for dir in \
     $tcl_path 
    do
      if test -r "$dir/tclConfig.sh" ; then
        tcl_config_sh="$dir/tclConfig.sh"
        break
      elif test -r "$dir/lib/tclConfig.sh" ; then
        tcl_config_sh="$dir/lib/tclConfig.sh"
        break
      elif test -r "$dir/unix/tclConfig.sh" ; then
        tcl_config_sh="$dir/unix/tclConfig.sh"
        break
      fi
    done
  else 
    #
    # Otherwise, search for Tcl configuration file.  
    #

    #  1. Search previously named locations.

    for dir in \
     $ac_default_prefix \
     $exec_prefix
    do
      if test -r "$dir/tclConfig.sh" ; then
        tcl_config_sh="$dir/tclConfig.sh"
        break
      elif test -r "$dir/lib/tclConfig.sh" ; then
        tcl_config_sh="$dir/lib/tclConfig.sh"
        break
      elif test -r "$dir/unix/tclConfig.sh" ; then
        tcl_config_sh="$dir/unix/tclConfig.sh"
        break
      fi
    done

    #  2. Search standard locations.

    if test "x$tcl_config_sh" = "x" ; then
      for dir in \
       `ls -dr /usr/local/tcl/tcl[[7-9]].[[0-9]]* 2>/dev/null` \
       /usr/local/tcl \
       /usr/local/lib \
       /usr/lib64 \
       /usr/local \
       `ls -dr /usr/lib/tcl[[7-9]].[[0-9]]* 2>/dev/null` \
       /sw/lib \
       /usr
      do
        if test -r "$dir/tclConfig.sh" ; then
	  tcl_config_sh="$dir/tclConfig.sh"
	  break
        elif test -r "$dir/lib/tclConfig.sh" ; then
	  tcl_config_sh="$dir/lib/tclConfig.sh"
	  break
        fi
      done
    fi
  fi

  AC_MSG_RESULT([${tcl_config_sh}])

  if test "x$tcl_config_sh" = "x" ; then
    echo "can't find Tcl configuration script \"tclConfig.sh\""
    tcl_path=""
  fi
fi

# -----------------------------------------------------------------------
#
#	Find the Tk build configuration file "tkConfig.sh"
#
# -----------------------------------------------------------------------

if test "x$tcl_path" != "x" ; then
  AC_MSG_CHECKING([for tkConfig.sh])
  tk_config_sh=""
  if test "$tcl_path" != "yes"; then
    #
    # Verify that a tkConfig.sh file exists in the directory specified 
    # by --with-tcl or --with-tk. 
    #
    for dir in \
     $tk_path \
     $tcl_path 
    do
      if test -r "$dir/tkConfig.sh" ; then
        tk_config_sh="$dir/tkConfig.sh"
        break
      elif test -r "$dir/lib/tkConfig.sh" ; then
        tk_config_sh="$dir/lib/tkConfig.sh"
        break
      elif test -r "$dir/unix/tkConfig.sh" ; then
        tk_config_sh="$dir/unix/tkConfig.sh"
        break
      fi
    done
  else 
    #
    # Search for Tk configuration file.  
    #

    #
    #  1. Search previously named locations.
    # 
    for dir in \
     $ac_default_prefix \
     $exec_prefix
    do
      if test -r "$dir/tkConfig.sh" ; then
        tk_config_sh="$dir/tkConfig.sh"
        break
      elif test -r "$dir/lib/tkConfig.sh" ; then
        tk_config_sh="$dir/lib/tkConfig.sh"
        break
      elif test -r "$dir/unix/tkConfig.sh" ; then
        tk_config_sh="$dir/unix/tkConfig.sh"
        break
      fi
    done
    #
    #  2. Search standard locations.
    # 
    if test "x$tk_config_sh" = "x" ; then
      for dir in \
       `ls -dr /usr/local/tcl/tcl[[7-9]].[[0-9]]* 2>/dev/null` \
       `ls -dr /usr/local/tk/tk[[7-9]].[[0-9]]* 2>/dev/null` \
       /usr/local/tcl \
       /usr/local/lib \
       /usr/lib64 \
       /usr/local \
       `ls -dr /usr/lib/tcl[[7-9]].[[0-9]]* 2>/dev/null` \
       `ls -dr /usr/lib/tk[[7-9]].[[0-9]]* 2>/dev/null` \
       /sw/lib \
       ${x_libraries} \
       /usr
      do
        if test -r "$dir/tkConfig.sh" ; then
	  tk_config_sh="$dir/tkConfig.sh"
	  break
        elif test -r "$dir/lib/tkConfig.sh" ; then
	  tk_config_sh="$dir/lib/tkConfig.sh"
	  break
        fi
      done
    fi
  fi
  AC_MSG_RESULT([${tk_config_sh}])

  if test "x$tk_config_sh" = "x" ; then
    echo "can't find Tk configuration script \"tkConfig.sh\""
    tcl_path=""
  fi
fi

# -----------------------------------------------------------------------
#
#	Source in the Tcl/Tk configuration scripts.  
#
#	BTW: Does anyone actually use the tclConfig.sh and tkConfig.sh 
#	scripts? They seem to be always missing something.  For example, 
#	why don't they say where to find the Tcl and Tk header files?
#
#       For example, give me the library directory paths separately 
#	(I can't easily parse "-Ldir", but I can always paste a -L 
#	on the front).  If I want to specify equivalent of the -R flag, 
#	I need the build a path of the library directories. Such as
#
#	   "-R $(BLTLIB):$(TKLIB):$(TCLLIB):($XLIB):$(JPEGLIB)"
#
# -----------------------------------------------------------------------

if test "x$tcl_path" != "x" ; then
  . $tcl_config_sh
  . $tk_config_sh

  # Should probably trust the config file contents, but this configure
  # file checks the Tcl and Tk include and lib directories.  Since
  # the config file doesn't separate out the libraries from the strings
  # passed to the compiler/linker, do it manually here.
  #
  # Extract TCL_LIB_DIR from TCL_LIB_SPEC
  # Extract TK_LIB_DIR from TK_LIB_SPEC
  # Extract TCL_INC_DIR from TCL_INCLUDE_SPEC
  # Extract TK_INC_DIR from TK_INCLUDE_SPEC
  #
  # These will be the defaults unless overridden by configure command line

  tmpstr=${TCL_LIB_SPEC#*-L}
  TCL_LIB_DIR=${tmpstr% -l*}
  tmpstr=${TK_LIB_SPEC#*-L}
  TK_LIB_DIR=${tmpstr% -l*}
  TCL_INC_DIR=${TCL_INCLUDE_SPEC#*-I}
  TK_INC_DIR=${TK_INCLUDE_SPEC#*-I}

  LIBS="${TCL_LIBS} ${LIBS}"

  if test "$TCL_VERSION" = "7.6" -a "$TK_VERSION" = "4.2" ; then
    :
  elif test "$TCL_VERSION" = "7.5" -a "$TK_VERSION" = "4.1" ; then
    :
  elif test "$TCL_VERSION" = "$TK_VERSION" ; then
    :
  else
    echo "Mismatched Tcl/Tk versions ($TCL_VERSION != $TK_VERSION)"
    tcl_path=""
  fi
fi

if test "x$tcl_path" != "x" ; then
  if test "x${tcl_includes}" != "x" ; then
    if test -r "${tcl_includes}/tcl.h" ; then
      TCL_INC_DIR=${tcl_includes}
    else
      echo "Can't find tcl.h in \"${tcl_includes}\""
      tcl_path=""
    fi
  else
    for dir in \
     ${TCL_PREFIX}/include/tcl${TCL_MAJOR_VERSION}.${TCL_MINOR_VERSION} \
     ${TCL_PREFIX}/include \
     ${TCL_SRC_DIR}/generic \
     ${TCL_INC_DIR}
    do
      if test -r "$dir/tcl.h" ; then
        TCL_INC_DIR=$dir
        break
      fi
    done
    if test "x${TCL_INC_DIR}" = "x" ; then
      echo "Can't find tcl.h header file"
      tcl_path=""
    fi
  fi
fi

if test "x$tcl_path" != "x" ; then
  if test "x${tk_includes}" != "x" ; then
    if test -r "${tk_includes}/tk.h" ; then
      TK_INC_DIR=${tk_includes}
    else
      echo "Can't find tk.h in \"${tk_includes}\""
      tcl_path=""
    fi
  else
    for dir in \
     ${TK_PREFIX}/include/tk${TK_MAJOR_VERSION}.${TK_MINOR_VERSION} \
     ${TK_PREFIX}/include \
     ${TK_SRC_DIR}/generic \
     ${TK_INC_DIR} \
     ${TCL_INC_DIR}
    do
      if test -r "$dir/tk.h" ; then
        TK_INC_DIR=$dir
        break
      fi
    done
    if test "x${TK_INC_DIR}" = "x" ; then
      echo "Can't find tk.h header file"
      tcl_path=""
    fi
  fi
fi

if test "x$tcl_path" != "x" ; then
  case $target in
    *-sunos4*|*-*-netbsd|NetBSD-*|FreeBSD-*|*-*-openbsd*|OpenBSD-*)
      TCL_LIB_NAME="tcl${TCL_MAJOR_VERSION}${TCL_MINOR_VERSION}"
      TK_LIB_NAME="tk${TK_MAJOR_VERSION}${TK_MINOR_VERSION}"
      ;;
    *)
      TCL_LIB_NAME="tcl${TCL_MAJOR_VERSION}.${TCL_MINOR_VERSION}"
      TK_LIB_NAME="tk${TK_MAJOR_VERSION}.${TK_MINOR_VERSION}"
      ;;
  esac

  loclib=`echo ${TCL_LIB_SPEC} | sed -e 's/.*-L//' -e 's/ .*//'`

  if test "x${TCL_LIB_SPEC}" = "x" ; then
     TCL_LIB_SPEC="-l${TCL_LIB_NAME}"
  fi
  if test "x${TK_LIB_SPEC}" = "x" ; then
     TK_LIB_SPEC="-l${TK_LIB_NAME}"
  fi

# Find the version of "wish" that corresponds to TCL_EXEC_PREFIX
# We really ought to run "ldd" to confirm that the linked libraries match.

  AC_MSG_CHECKING([for wish executable])
  for dir in \
   ${TK_EXEC_PREFIX}/bin \
   ${TK_EXEC_PREFIX}
  do
    for wishexe in \
      wish \
      wish${TK_VERSION} \
      wish.exe \
      wish${TK_VERSION}.exe
    do
      if test -r "$dir/$wishexe" ; then
        WISH_EXE=$dir/$wishexe
        break
      fi
    done  
    if test "x${WISH_EXE}" != "x" ; then
      break  
    fi
  done
  if test "x${WISH_EXE}" = "x" ; then
    echo "Warning: Can't find executable for \"wish\".  You may have to"
    echo "manually set the value for WISH_EXE in the xcircuit startup script."
    AC_MSG_RESULT(no)
  else
    AC_MSG_RESULT([${WISH_EXE}])
  fi

# Have to define SHDLIB_EXT here even though we have to do it below, too.
  case $target in
     *-hpux*)
	SHDLIB_EXT=".sl"
	SHDLIB_EXT_ALT=".sl"
	;;
     *cygwin*)
	SHDLIB_EXT=".dll"
	SHDLIB_EXT_ALT=".dll.a"
	;;
     *-darwin*)
	SHDLIB_EXT=".dylib"
	SHDLIB_EXT_ALT=".dylib"
	;;
     *)
	SHDLIB_EXT=".so"
	SHDLIB_EXT_ALT=".so"
	;;
  esac

  if test "x${tcl_libraries}" != "x" ; then
    for libname in \
     "${tcl_libraries}/lib${TCL_LIB_FILE}" \
     "${tcl_libraries}/lib${TCL_LIB_NAME}${SHDLIB_EXT}" \
     "${tcl_libraries}/lib${TCL_LIB_NAME}${SHDLIB_EXT_ALT}"
    do
      if test -r "$libname" ; then
        TCL_LIB_DIR="${tcl_libraries}"
        break
      fi
    done

    if test "x${TCL_LIB_DIR}" = "x" ; then
      echo "Can't find tcl library in \"${tcl_libraries}\""
      tcl_path=""
    fi
  else
    for libname in \
      "${loclib:=${TCL_EXEC_PREFIX}/lib}/lib${TCL_LIB_NAME}${SHDLIB_EXT}" \
      "${loclib:=${TCL_EXEC_PREFIX}/lib}/lib${TCL_LIB_NAME}${SHDLIB_EXT_ALT}" \
      "${loclib:=${TCL_EXEC_PREFIX}/lib64}/lib${TCL_LIB_NAME}${SHDLIB_EXT}"
    do
      if test -r "$libname" ; then
        TCL_LIB_DIR="${TCL_EXEC_PREFIX}/lib"
        break
      fi
    done
    if test "x${TCL_LIB_DIR}" = "x" ; then
      echo "Can't find tcl library"
      tcl_path=""
    fi
  fi
fi

if test "x$tcl_path" != "x" ; then
  if test "x${tk_libraries}" != "x" ; then
    for libname in \
     "${tk_libraries}/${TCL_LIB_FILE}" \
     "${tk_libraries}/lib${TK_LIB_NAME}${SHDLIB_EXT}" \
     "${tk_libraries}/lib${TK_LIB_NAME}${SHDLIB_EXT_ALT}"
    do
      if test -r "$libname" ; then
        TK_LIB_DIR="${tk_libraries}"
        break
      fi
    done
    if test "x${TK_LIB_DIR}" = "x" ; then
      echo "Can't find tk library in \"${tk_libraries}\""
      tcl_path=""
    fi
  else
    for libname in \
      "${loclib:=${TK_EXEC_PREFIX}/lib}/lib${TK_LIB_NAME}${SHDLIB_EXT}" \
      "${loclib:=${TK_EXEC_PREFIX}/lib}/lib${TK_LIB_NAME}${SHDLIB_EXT_ALT}" \
      "${loclib:=${TK_EXEC_PREFIX}/lib64}/lib${TK_LIB_NAME}${SHDLIB_EXT}"
    do
      if test -r "$libname" ; then
        TK_LIB_DIR="${TK_EXEC_PREFIX}/lib"
        break
      fi
    done
    if test "x${TK_LIB_DIR}" = "x" ; then
      echo "Can't find tk library"
      tcl_path=""
    fi
  fi
fi

dnl --------------------------------
dnl End of Tcl/Tk search
dnl --------------------------------

if test "x$tcl_path" != "x" ; then
  LIB_SPECS_NOSTUB="${LIB_SPECS}"

# -----------------------------------------------------------------------
# 
# Tk libraries and header files
#
# -----------------------------------------------------------------------

  if test "${TK_INC_DIR}" != "/usr/include" ; then
    INC_SPECS="${INC_SPECS} -I${TK_INC_DIR}"
  fi
  if test "${TK_LIB_DIR}" = "/usr/lib" -o \
	"${TK_LIB_DIR}" = "/usr/lib64" ; then
    LIB_SPECS_NOSTUB="${LIB_SPECS_NOSTUB} ${TK_LIB_SPEC}"
    LIB_SPECS="${LIB_SPECS} ${TK_STUB_LIB_SPEC}"
  else
    LIB_SPECS_NOSTUB="${LIB_SPECS_NOSTUB} -L${TK_LIB_DIR} ${TK_LIB_SPEC}"
    LIB_SPECS="${LIB_SPECS} -L${TK_LIB_DIR} ${TK_STUB_LIB_SPEC}"
    if test "x${loader_run_path}" = "x" ; then
      loader_run_path="${TK_LIB_DIR}"
    else
      loader_run_path="${TK_LIB_DIR}:${loader_run_path}"
    fi
  fi

# -----------------------------------------------------------------------
# 
# Tcl libraries and header files
#
# Add a header file directory specification only if the Tcl headers reside 
# in a different directory from Tk's.  
#
#
# -----------------------------------------------------------------------
  if test "${TCL_INC_DIR}" != "/usr/include" -a \
	"${TCL_INC_DIR}" != "${TK_INC_DIR}" ; then
    INC_SPECS="${INC_SPECS} -I${TCL_INC_DIR}"
  fi

  if test "${TCL_LIB_DIR}" = "/usr/lib" -o \
	"${TCL_LIB_DIR}" = "/usr/lib64" -o \
	"${TCL_LIB_DIR}" = "${TK_LIB_DIR}" ; then
    LIB_SPECS_NOSTUB="${LIB_SPECS_NOSTUB} ${TCL_LIB_SPEC}"
    LIB_SPECS="${LIB_SPECS} ${TCL_STUB_LIB_SPEC}"
  else
    LIB_SPECS_NOSTUB="${LIB_SPECS_NOSTUB} -L${TCL_LIB_DIR} ${TCL_LIB_SPEC}"
    LIB_SPECS="${LIB_SPECS} -L${TCL_LIB_DIR} ${TCL_STUB_LIB_SPEC}"
    if test "x${loader_run_path}" = "x" ; then
      loader_run_path="${TCL_LIB_DIR}"
    else
      loader_run_path="${TCL_LIB_DIR}:${loader_run_path}"
    fi
  fi

dnl-----------------------------------------------------------------
dnl Path to FTDI D2XX distribution
dnl Use this if the D2XX distribution remains as downloaded;  the
dnl value DIR points to the directory containing "ftd2xx.h", and
dnl under this there should be subdirectory "build", and under that
dnl directories "x86_64", "i386", and possibly others.
dnl-----------------------------------------------------------------

AC_ARG_WITH(d2XX,
[  --with-d2XX=DIR		path to FTDI d2XX], [
   if test -d "$withval"; then
      FTDI_D2XX_DIR=$withval
   else
      FTDI_D2XX_DIR=${PATH}
   fi
   AC_PATH_PROG(FTDI_D2XX_INCLUDE, ftd2xx.h, , $FTDI_D2XX_DIR)
], [
   AC_PATH_PROG(FTDI_D2XX_INCLUDE, ftd2xx.h, , )
])

dnl-----------------------------------------------------------------
dnl Check for the D2XX library in the path of <DIR>
dnl-----------------------------------------------------------------

if test "x${FTDI_D2XX_DIR}" != "x" ; then
   echo -n "searching for libftd2xx.a in ${FTDI_D2XX_DIR}..."
   case $target in
      x86_64-*)
	for dir in \
	   ${FTDI_D2XX_DIR} \
	   ${FTDI_D2XX_DIR}/build \
	   ${FTDI_D2XX_DIR}/x86_64 \
	   ${FTDI_D2XX_DIR}/build/x86_64
	do
	   if test -r "$dir/libftd2xx.a" ; then
	      FTDI_D2XX_LIB="$dir"
	      break
	   fi
        done
      ;;
      *-linux|i686-*)
	for dir in \
	   ${FTDI_D2XX_DIR} \
	   ${FTDI_D2XX_DIR}/build \
	   ${FTDI_D2XX_DIR}/i386 \
	   ${FTDI_D2XX_DIR}/build/i386
	do
	   if test -r "$dir/libftd2xx.a" ; then
	      FTDI_D2XX_LIB="$dir"
	      break
	   fi
        done
      ;;
  esac
else
   AC_PATH_PROG(FTDI_D2XX_LIB, libftd2xx.a, , )
fi

if test "x${FTDI_D2XX_LIB}" != "x" ; then
   echo "yes"
else
   echo "no"
fi

dnl Path to FTDI d2XX headers: ftd2xx.h
dnl (if specified separately from library path)

AC_ARG_WITH(d2XX_include,
[  --with-d2XX_include=DIR		path to FTDI d2XX headers], [
   if test -d "$withval"; then
      FTDI_D2XX_INC_DIR=$withval
   elif test -f "$withval"; then
      FTDI_D2XX_INC_DIR=${withval%/ftd2xx.h}
   else
      FTDI_D2XX_INC_DIR=${PATH}
   fi
   AC_PATH_PROG(FTDI_D2XX_INCLUDE, ftd2xx.h, , $FTDI_D2XX_INC_DIR)
], [
   AC_PATH_PROG(FTDI_D2XX_INCLUDE, ftd2xx.h, , )])

dnl Path to FTDI D2XX libraries: libftd2xx.a
dnl (if specified separately from include path)

AC_ARG_WITH(d2XX_lib,
[  --with-d2XX_lib=DIR		path to FTDI d2XX object library], [
   if test -d "$withval"; then
      FTDI_D2XX_LIB_DIR=$withval
   elif test -f "$withval"; then
      FTDI_D2XX_LIB_DIR=${withval%/libftd2xx.a}
   else
      FTDI_D2XX_LIB_DIR=${PATH}
   fi
], [])

dnl-----------------------------------------------------------------
dnl Check for the D2XX library in the path of <DIR>
dnl-----------------------------------------------------------------

if test "x${FTDI_D2XX_LIB}" == "x" ; then
   if test "x${FTDI_D2XX_LIB_DIR}" != "x" ; then

      echo "libftd2xx.a not found in D2XX header path."
      echo "d2XX_lib specified."
      echo -n "Searching for libftd2xx.a . . ."

      case $target in
         x86_64-*)
	   for dir in \
	      ${FTDI_D2XX_LIB_DIR} \
	      ${FTDI_D2XX_LIB_DIR}/build \
	      ${FTDI_D2XX_LIB_DIR}/x86_64 \
	      ${FTDI_D2XX_LIB_DIR}/build/x86_64
	   do
	      if test -r "$dir/libftd2xx.a" ; then
	         FTDI_D2XX_LIB="$dir"
	         break
	      fi
           done
         ;;
         *-linux)
	   for dir in \
	      ${FTDI_D2XX_LIB_DIR} \
	      ${FTDI_D2XX_LIB_DIR}/build \
	      ${FTDI_D2XX_LIB_DIR}/i386 \
	      ${FTDI_D2XX_LIB_DIR}/build/i386
	   do
	      if test -r "$dir/libftd2xx.a" ; then
	         FTDI_D2XX_LIB="$dir"
	         break
	      fi
           done
         ;;
     esac

     if test "x${FTDI_D2XX_LIB}" != "x" ; then
        echo "yes"
     else
        echo "no"
     fi

   fi
fi

if test "x${FTDI_D2XX_INCLUDE}" != "x" ; then
   INC_SPECS="${INC_SPECS} -I${FTDI_D2XX_INCLUDE%/ftd2xx.h}"
fi

if test "x${FTDI_D2XX_LIB}" != "x" ; then
   LIB_SPECS="${LIB_SPECS} -L${FTDI_D2XX_LIB} -lrt -lftd2xx -ldl -lpthread"
fi

dnl-----------------------------------------------------------------
dnl Path to libftdi distribution (alternative to d2XX)
dnl-----------------------------------------------------------------

AC_ARG_WITH(libftdi,
[  --with-libftdi=DIR		path to libftdi], [
   if test -d "$withval"; then
      LIBFTDI_DIR=$withval
   else
      LIBFTDI_DIR=${PATH}
   fi
   AC_PATH_PROG(LIBFTDI_INCLUDE, ftdi.h, , $LIBFTDI_DIR)
], [
   AC_PATH_PROG(LIBFTDI_INCLUDE, ftdi.h, , )
])

dnl-----------------------------------------------------------------
dnl Check for the libftdi library in the path of <DIR>
dnl-----------------------------------------------------------------

if test "x${LIBFTDI_DIR}" != "x" ; then
   echo -n "searching for libftdi1.so in ${LIBFTDI_DIR}..."
   case $target in
      x86_64-*)
	for dir in \
	   ${LIBFTDI_DIR} \
	   ${LIBFTDI_DIR}/lib64 \
	   ${LIBFTDI_DIR}/lib
	do
	   if test -r "$dir/libftdi1.so" ; then
	      LIBFTDI_LIB="$dir"
	      break
	   fi
        done
      ;;
      *-linux|i686-*)
	for dir in \
	   ${LIBFTDI_DIR} \
	   ${LIBFTDI_DIR}/lib64 \
	   ${LIBFTDI_DIR}/lib
	do
	   if test -r "$dir/libftdi1.so" ; then
	      LIBFTDI_LIB="$dir"
	      break
	   fi
        done
      ;;
  esac
else
   AC_PATH_PROG(LIBFTDI_LIB, libftdi1.so, , )
fi

if test "x${LIBFTDI_LIB}" != "x" ; then
   echo "yes"
else
   echo "no"
fi

dnl Path to LIBFTDI headers: ftdi.h
dnl (if specified separately from library path)

AC_ARG_WITH(libftdi_include,
[  --with-libftdi_include=DIR		path to LIBFTDI headers], [
   if test -d "$withval"; then
      LIBFTDI_INC_DIR=$withval
   elif test -f "$withval"; then
      LIBFTDI_INC_DIR=${withval%/ftdi.h}
   else
      LIBFTDI_INC_DIR=${PATH}
   fi
   AC_PATH_PROG(LIBFTDI_INCLUDE, ftdi.h, , $LIBFTDI_INC_DIR)
], [
   AC_PATH_PROG(LIBFTDI_INCLUDE, ftdi.h, , )])

dnl Path to LIBFTDI libraries: libftdi1.a, libftdi1.so.2
dnl (if specified separately from include path)

AC_ARG_WITH(libftdi_lib,
[  --with-libftdi_lib=DIR		path to LIBFTDI object library], [
   if test -d "$withval"; then
      LIBFTDI_LIB_DIR=$withval
   elif test -f "$withval"; then
      LIBFTDI_LIB_DIR=${withval%/libftdi1.so}
   else
      LIBFTDI_LIB_DIR=${PATH}
   fi
], [])

dnl-----------------------------------------------------------------
dnl Check for the LIBFTDI headers in standard paths
dnl-----------------------------------------------------------------

if test "x${LIBFTDI_INCLUDE}" == "x" ; then
      echo -n "Searching for ftdi.h in standard paths . . ."

   for dir in \
      ${LIBFTDI_INC_DIR} \
      ${LIBFTDI_INC_DIR}/libftdi1 \
      /usr/include \
      /usr/local/include \
      /usr/share/include \
      /usr/include/libftdi1 \
      /usr/local/include/libftdi1 \
      /usr/share/include/libftdi1
   do
      if test -r "$dir/ftdi.h" ; then
         LIBFTDI_INCLUDE="$dir"
         break
      fi
   done

   if test "x${LIBFTDI_INCLUDE}" != "x" ; then
      echo "yes"
   else
      echo "no"
   fi
fi

dnl-----------------------------------------------------------------
dnl Check for the LIBFTDI library in the path of <DIR>
dnl-----------------------------------------------------------------

if test "x${LIBFTDI_LIB}" == "x" ; then
      echo -n "Searching for libftdi1.so in standard paths . . ."

      case $target in
         x86_64-*)
	   for dir in \
	      ${LIBFTDI_LIB_DIR} \
	      ${LIBFTDI_LIB_DIR}/lib \
	      ${LIBFTDI_LIB_DIR}/lib64 \
	      /usr/lib \
	      /usr/lib64 \
	      /usr/local/lib \
	      /usr/local/lib64
	   do
	      if test -r "$dir/libftdi1.so" ; then
	         LIBFTDI_LIB="$dir"
	         break
	      fi
           done
         ;;
         *-linux)
	   for dir in \
	      ${LIBFTDI_LIB_DIR} \
	      ${LIBFTDI_LIB_DIR}/lib \
	      /usr/lib \
	      /usr/local/lib
	   do
	      if test -r "$dir/libftdi1.so" ; then
	         LIBFTDI_LIB="$dir"
	         break
	      fi
           done
         ;;
     esac

     if test "x${LIBFTDI_LIB}" != "x" ; then
        echo "yes"
     else
        echo "no"
     fi
fi

if test "x${LIBFTDI_INCLUDE}" != "x" ; then
   INC_SPECS="${INC_SPECS} -I${LIBFTDI_INCLUDE%/ftdi.h}"
fi

if test "x${LIBFTDI_LIB}" != "x" ; then
   LIB_SPECS="${LIB_SPECS} -L${LIBFTDI_LIB} -lrt -lftdi1 -ldl -lpthread"
fi
dnl Target library location

AC_ARG_WITH(libdir,
[  --with-libdir=DIR			path to libftdi runtime files], [
   TCLFTDI_LIB_DIR=$withval
], [
   TCLFTDI_LIB_DIR=${ac_default_prefix}/share/tclftdi
])

AC_ARG_WITH(bindir,
[  --with-bindir=DIR			path to libftdi launch script], [
   TCLFTDI_BIN_DIR=$withval
], [
   TCLFTDI_BIN_DIR=${ac_default_prefix}/bin
])

AC_SUBST(TCLFTDI_BIN_DIR)
AC_SUBST(TCLFTDI_LIB_DIR)

#--------------------------------------------------------------------
#
# Check if we can generate shared libraries on this system.  Set flags 
# to generate shared libraries for systems that we know about.  Start 
# with the values found in tclConfig.sh, make changes as we know about 
# the different systems.
#
#--------------------------------------------------------------------

# Initialize shared library build variables

  SHLIB_LD=""
  LDDL_FLAGS="-shared"
  SHDLIB_EXT=".so"
  EXTRA_LIB_SPECS=""

  build_shared="yes"

  case $target in
    *-bsdi2*|*-bsdi3*)
      SHLIB_LD="shlicc"
      LDDL_FLAGS="-r"

      EXTRA_LIB_SPECS="-ldl"
      ;;

    *-darwin*)
      SHLIB_CFLAGS="-fPIC"
      SHDLIB_EXT=".dylib"
      LDDL_FLAGS="-dynamiclib -flat_namespace -undefined suppress -noprebind"
      LDFLAGS="${LDFLAGS} ${LIB_SPECS}"
      CFLAGS="${CFLAGS} ${X_CFLAGS} ${INC_SPECS} -I/sw/include -fno-common"
      ;;

    *cygwin*)
      SHDLIB_EXT=".dll"
      AC_DEFINE(CYGWIN)
      AC_DEFINE(USE_DL_IMPORT)
      LDDL_FLAGS='-shared -Wl,--enable-auto-image-base'
      if test "x${loader_run_path}" != "x" ; then
	LD_RUN_PATH="${LD_RUN_PATH} -Wl,-rpath,${loader_run_path}"
      fi
      ld_extra_libs=${LIB_SPECS}
      ;;

    *-bsdi4*)
      SHLIB_CFLAGS="-export-dynamic -fPIC"
      SHLIB_LD="${CC}"
      LDDL_FLAGS='-shared -Wl,-E -Wl,-soname,$@'
      ;;

    *-linux*)
      SHLIB_CFLAGS="-fPIC"
      LDDL_FLAGS='-shared -Wl,-soname,$@'
      if test "x${loader_run_path}" != "x" ; then
	LD_RUN_PATH="${LD_RUN_PATH} -Wl,-rpath,${loader_run_path}"
      fi
      LDFLAGS=""
      EXTRA_LIB_SPECS="-ldl"
      ;;
  
    *-netbsd*|*-freebsd*|*-openbsd*)
      # Not available on all versions:  check for include file.
      AC_CHECK_HEADER(dlfcn.h, test_ok=yes, test_ok=no)
      if test "$test_ok" = yes; then
        SHLIB_CFLAGS="-fpic"
        SHLIB_LD="ld"
        LDDL_FLAGS="-shared"
      fi
      ;;

    *-sco*)
      # Note, dlopen is available only on SCO 3.2.5 and greater.  However,
      # this test works, since "uname -s" was non-standard in 3.2.4 and
      # below.

      SHLIB_CFLAGS="-Kpic -belf"
      SHLIB_LD="ld"
      LDDL_FLAGS="-G"
      LDFLAGS="-belf -Wl,-Bexport"
      ;;

  esac

# If we're running gcc, then set SHLIB_CFLAGS flags for compiling
# shared libraries for gcc, instead of those of the vendor's
# compiler.

  if test "$GCC" = "yes" ; then
    case $target in
      *cygwin*)
	;;
      *)
	SHLIB_CFLAGS="-fPIC"
	;;
    esac
  fi
  if test "${with_gnu_ld}" = "yes" ; then
    LDDL_FLAGS="${LDDL_FLAGS} -Wl,--version-script=symbol.map"
  fi
 
  AC_SUBST(SHDLIB_EXT)
  AC_SUBST(SHLIB_LD)
  AC_SUBST(LD)
  AC_SUBST(LDDL_FLAGS)
  AC_SUBST(SHLIB_LIB_SPECS)

  AC_SUBST(EXTRA_LIB_SPECS)
  AC_SUBST(LDFLAGS)
  AC_SUBST(INC_SPECS)
  AC_SUBST(LIB_SPECS)
  AC_SUBST(LIB_SPECS_NOSTUB)
  AC_SUBST(WISH_EXE)
  AC_SUBST(TCL_LIB_DIR)

fi

AC_SUBST(CFLAGS)
AC_SUBST(SHLIB_CFLAGS)
AC_SUBST(LDFLAGS)
AC_SUBST(STDLIBS)
AC_SUBST(INSTALL)
AC_SUBST(INSTALL_DATA)

AC_SUBST(MKDIR)

echo ""
echo "Configuration results:"
echo "----------------------------------------------------"
echo ""

if test "x${WISH_EXE}" == "x"; then
   echo "ERROR: wish not found.  Use --with-tcl=<DIR>"
else
   echo "Using wish at: ${WISH_EXE}"
fi

if test "x${tcl_path}" == "x"; then
   echo "ERROR: Tcl/Tk not found.  Use --with-tcl=<DIR>"
else
   echo "Using Tcl libraries at: ${TCL_LIB_DIR}"
   echo "Using Tcl headers at: ${TCL_INC_DIR}"
   echo "Using Tk libraries at: ${TK_LIB_DIR}"
   echo "Using Tk headers at: ${TK_INC_DIR}"
fi

if test "x${LIBFTDI_LIB}" != "x" ; then
   if test "x${LIBFTDI_INCLUDE}" == "x"; then
      if test "x${FTDI_D2XX_INCLUDE}" == "x"; then
         echo "ERROR: LIBFTDI headers not found.  Use --with-libftdi=<DIR>"
      fi
   else
      echo "Using LIBFTDI headers at: ${LIBFTDI_INCLUDE}"
      AC_DEFINE(HAVE_LIBFTDI)
   fi

   if test "x${LIBFTDI_LIB}" == "x"; then
      if test "x${FTDI_D2XX_LIB}" == "x"; then
         echo "ERROR: LIBFTDI library not found.  Use --with-libftdi=<DIR>"
      fi
   else
      echo "Using LIBFTDI library at: ${LIBFTDI_LIB}"
      AC_DEFINE(HAVE_LIBFTDI)
   fi
fi

if test "x${FTDI_D2XX_LIB}" != "x" ; then
   if test "x${FTDI_D2XX_INCLUDE}" == "x"; then
      if test "x${LIBFTDI_INCLUDE}" == "x"; then
         echo "ERROR: FTDI D2XX headers not found.  Use --with-ftdi-d2xx=<DIR>"
      fi
   else
      echo "Using FTDI D2XX headers at: ${FTDI_D2XX_INCLUDE}"
      AC_DEFINE(HAVE_D2XX)
   fi

   if test "x${FTDI_D2XX_LIB}" == "x"; then
      if test "x${LIBFTDI_LIB}" == "x"; then
         echo "ERROR: FTDI D2XX library not found.  Use --with-ftdi-d2xx=<DIR>"
      fi
   else
      echo "Using FTDI D2XX library at: ${LIBFTDI_LIB}"
      AC_DEFINE(HAVE_D2XX)
   fi
fi

if test "x${LIBFTDI_LIB}" != "x" -a "x${FTDI_D2XX_LIB}" != "x"; then
   echo "ERROR:  Cannot use libraries for both libftdi and d2XX!"
fi
if test "x${LIBFTDI_INCLUDE}" != "x" -a "x${FTDI_D2XX_INCLUDE}" != "x"; then
   echo "ERROR:  Cannot use include files for both libftdi and d2XX!"
fi

echo "----------------------------------------------------"

AC_OUTPUT(Makefile)
